Making a map:


Go to http://overpass-turbo.eu/, and type in this code (LAT is the school’s latidute, and LONG is the school’s longitude (note: for Claremont schools, the longitude is to the west, so it will be a negative number ~ -117)):


node(around:1000, LAT, LONG);
	/*added by auto repair*/
	(._;>;);
	/*end of auto repair*/
	out; 


Once this runs, press the export button, and press as KML. This will generate the KML file that will create your map. 


Copy this file into the KML folder in your repo. Important: make sure that the right code is commented/uncommented in pointsFunction.py: in this step, the first part of code should be uncommented, according to the comments in the code, and the second should be commented, again, as directed by the comments in the code. Important: make sure to edit the LAT and LNG values in dirProject.py to be the longitude and latitude of the school. Run dirProject.py, using the command (KML_NAME will be the name of your recently generated KML file.) *:


$ python dirProject.py -k KML/KML_NAME -m dirProject.html -t out.txt 


This will produce a map, called dirProject.html. This will likely not be a perfect map, and you might want to add/delete points. This is done through Google My Maps, see editing your map for further explanation. 


Once you have your perfected KML file from Google My Maps, or want to see how the new changes look on a map with arrows, you run dirProject.py again. Important: make sure that the right code is commented/uncommented in pointsFunction.py: in this step, the second part of code should be uncommented, according to the comments in the code, and the first should be commented, again, as directed by the comments in the code. This will be the reverse of the step above. It is how we parse the different KML file format produced by Google MyMaps. Also important: for Google MyMaps KML files, the URL must be deleted from the KML file, otherwise it will not parse. So the second tag, which looks like: <kml xmlns='http://www.opengis.net/kml/2.2'> should become <kml>. After these two steps, you can then run dirProject.py, using the same command (again, with KML_NAME being your recently generated KML file, this time from Google MyMaps.) :


$ python dirProject.py -k KML/KML_NAME -m dirProject.html -t out.txt 


After you are satisfied with your map, you can add the javascript to Firebase! See adding to Firebase for this. 


*Note: Watch out for Jesus: For some reason, one of the KML files generated by overpass.eu would not parse, because the point, a church, had an extra tag in the tree, we think. We solved this by deleting the node.
 


Editing your map: 


Go to Google My Maps at https://www.google.com/maps/d/. You may have to make an account for this (?). Click on create new map, if a layer does not already exist, click add layer. On the layer, click import, and upload the KML file you want to edit. 


From here you can compare your generated map to the nodes on Google My Map. You can add extra nodes (we’ve been adding in areas without arrow coverage so the map is more helpful) and delete nodes that produce unneeded arrows (our strategy for this has been to approximate where the unneeded arrow begins, and delete that point). When satisfied with your changes, click the three dots by the map name, and click Export to KML. Make sure the selection is overpass-turbo.eu export (or whatever the name of the KML file is), and not entire map. Check the box that says export to a .kml file. 


This will produce a KML file from Google My Maps that you can use, you can run it through the python code to produce an arrowed map. 


This process can be repeated as many times as necessary to perfect the map. 




Adding to Firebase: 


Start by logging in to Firebase:
 
Account name: hmc.at.maps
Password: hmc_medero121
 
Under the Database tab, you can add schools and their addresses. We intended to also include the longitude and latitude here, but did not implement it. This would be useful for running dirProject.py and having it automatically populate the longitude and latitude.


Under the Storage tab, each folder name is the randomly generated key that represents each school. The folders each contain the generated javascript map data for the corresponding school  


To make a file here, copy the key from Database that you want the folder to be named. Click the create folder button, name it that key. Open the new folder, and click upload file. This should take you to a popup that you can use to upload your recently created mapScript.js. This file will be found in the static/js folder within your local repo. 




Switching maps


The team has begun, but not completed, implementation of mapSwitch. When mapSwitch is complete, clicking on the school select in the website will switch out the current mapScript.js for the mapScript.js that corresponds to the map for the clicked school.
There are two components in the code that relate to map switching. In flaskStart.py, the mapSwitch(id) function is defined. The id refers to the school id; mapSwitch finds the mapScript on Firebase for this id and then places it in the frontend. There is a print statement enabled for debugging. In layout.html, there is code to call mapSwitch (though it is currently commented out). This is located inside the dropdown (see class=”dropdown-content”).




Running the website:


To start the website, run:


$ python flaskStart.py                                                       






Debugging tips! (tips only applicable to pointsFunction.py)


Sometimes, the KML file does not want to parse correctly. The most successful way I’ve found to debug this is print statements. For those not familiar with the tree format we’re using (I believe xml.etree.ElementTree), printing the tag and text has proven to be a pretty good way to track down problem nodes. For example, in the for loop, printing root[0][num][1 or 0, depending on if there is an extra tag or not - works to try both][0].text should print the coordinate of the point, up until it breaks. Making sure you’re in the right tag is also useful, for example printing root[0][num][0/1][0].tag should print “coordinates.” A note on the 0/1: sometimes, there is an extra tag in one of the points, name, and it will mean we have to move to a different part of the tree. The code should handle this currently, but there might be other exceptions, like two extra tags. Something to watch out for. 


